//
//  PixelfedCustomEmoji.swift
//  PixFeeder
//
//  Created by Nathan Wale on 7/9/2023.
//

import Foundation

/**
    A Preview card for a link.
    Generated by OpenGraph.
    - Decoded from API as described at: https://docs.joinmastodon.org/entities/PreviewCard/
 */

// MARK: - entity
struct PixelfedPreviewCard
{
    /// Location of linked resource
    var url: URL
    
    /// Title of linked resource
    var title: String
    
    /// Description of preview
    var description: String
    
    /// Type of Preview Card
    var type: PreviewCardType
    
    /// Author of original resource
    var authorName: String
    
    /// Link to author of original resource
    var authorUrl: URL?
    
    /// The provider of the original resource
    var providerName: String
    
    /// A link to the provider of the original resource
    var providerUrl: URL?
    
    /// HTML used to generate preview card
    var html: String
    
    /// Preview width in pixels
    var width: Int
    
    /// Preview height in pixels
    var height: Int
    
    /// Optional preview thumbnail
    var imageUrl: URL?
    
    /// URL for image embeds, instead of custom HTML
    var embedUrl: URL?
    
    /// Visual hash of media computed by the [BlurHash](https://github.com/woltapp/blurhash) algorithm
    var blurhash: String?
    
    /// Usage statisics for give days. Optional
    var history: [History]
}


// MARK: - custom decoding
// We need to do custom decoding because some URLs are empty strings!
// (and are therefore decoded as `nil`)
extension PixelfedPreviewCard: Codable
{
    enum CodingKeys: String, CodingKey
    {
        case url
        case title
        case description
        case type
        case authorName
        case authorUrl
        case providerName
        case providerUrl
        case html
        case width
        case height
        case imageUrl = "image"
        case embedUrl
        case blurhash
        case history
    }
    
    init(from decoder: Decoder) throws
    {
        // values
        let values = try decoder.container(keyedBy: CodingKeys.self)
        
        url = try values.decode(URL.self, forKey: .url)
        title = try values.decode(String.self, forKey: .title)
        description = try values.decode(String.self, forKey: .description)
        type = try values.decode(PreviewCardType.self, forKey: .type)
        authorName = try values.decode(String.self, forKey: .authorName)
        authorUrl = try? values.decode(URL.self, forKey: .authorUrl)
        providerName = try values.decode(String.self, forKey: .providerName)
        providerUrl = try? values.decode(URL.self, forKey: .providerUrl)
        html = try values.decode(String.self, forKey: .html)
        width = try values.decode(Int.self, forKey: .width)
        height = try values.decode(Int.self, forKey: .height)
        imageUrl = try? values.decode(URL.self, forKey: .imageUrl)
        embedUrl = try? values.decode(URL.self, forKey: .embedUrl)
        blurhash = try values.decodeIfPresent(String?.self, forKey: .blurhash) ?? nil
        history = try values.decodeIfPresent([History].self, forKey: .history) ?? []
    }
}


// MARK: - inner types
extension PixelfedPreviewCard
{
    ///
    /// Type of Preview Card
    ///
    enum PreviewCardType: String, Codable
    {
        /// Preview of link
        case link = "link"
        
        /// Preview of photo
        case photo = "photo"
        
        /// Preview of video
        case video = "video"
        
        /// Embedded iframe: Not currently accepted, so won't show up in practise
        case rich = "rich"
    }
    
    
    ///
    /// Usage statisics for given days.
    ///
    struct History: Codable
    {
        /// UNIX timestamp representig the day
        var day: String
        
        /// Number of accounts using this link
        ///  (an integer as a String, for God knows what reason)
        var accounts: String
        
        /// The counted statuses using the link within `day`
        ///  (again, an integer as a string)
        var uses: String
    }
}
